% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/warp-unwarp.R
\name{warp_function}
\alias{warp_function}
\title{Create a warped version of a model fitting function}
\usage{
warp_function(x, warper, ...)
}
\arguments{
\item{x}{A model fitting function such as \code{\link[stats:lm]{stats::lm()}} or \link[randomForest:randomForest]{randomForest::randomForest}}

\item{warper}{A \code{warper} object, for example a \link{pca_warper}.}

\item{...}{Additional arguments to be passed to the model fitting function.}
}
\value{
A function representing the composition of the learning function \eqn{F:L\mapsto\hat{f}}
with the inverse transformation function \eqn{T^{-1}}. In other words,
this function first (back)transformed its input data from the transformed space
to the original feature space, and then fits a model using these features.
}
\description{
Use \code{\link[=warp_fitted_model]{warp_fitted_model()}} instead, which provides a more
elegant way to create a warped perspective on a model. This function may
be omitted in the future, unless it turns out to be instrumental
in drop/permute and re-learn techniques that require a trainable
model, not a fitted one.
}
\details{
Models fitted using the resulting object currently don't seem to work properly
inside function calls that are parallelized with \code{future}; at least that's
what happens with \code{sperrorest}.
}
\seealso{
\code{\link[=warp_fitted_model]{warp_fitted_model()}}
}
